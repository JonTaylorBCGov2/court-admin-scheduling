// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using CAS.DB.models;

namespace CAS.DB.Migrations
{
    [DbContext(typeof(CourtAdminDbContext))]
    [Migration("20201009195155_MorePermissions")]
    partial class MorePermissions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CAS.API.Models.DB.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'200', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AgencyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("JustinCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ParentLocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId")
                        .IsUnique();

                    b.HasIndex("CreatedById");

                    b.HasIndex("RegionId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("CAS.DB.models.auth.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'200', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(1193),
                            Description = "Allows the user to login.",
                            Name = "Login"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2059),
                            Description = "View their own profile",
                            Name = "ViewOwnProfile"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2079),
                            Description = "View profiles in their own location",
                            Name = "ViewProfilesInOwnLocation"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2081),
                            Description = "View profiles in all locations",
                            Name = "ViewProfilesInAllLocation"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2082),
                            Description = "Create Profile (User)",
                            Name = "CreateUsers"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2083),
                            Description = "Expire Profile (User)",
                            Name = "ExpireUsers"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2084),
                            Description = "Edit Profile (User)",
                            Name = "EditUsers"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2086),
                            Description = "View all Roles",
                            Name = "ViewRoles"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2087),
                            Description = "Create and Assign Roles",
                            Name = "CreateAndAssignRoles"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2088),
                            Description = "Expire Roles",
                            Name = "ExpireRoles"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2089),
                            Description = "Edit Roles",
                            Name = "EditRoles"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2091),
                            Description = "View Manage Types",
                            Name = "ViewManageTypes"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2092),
                            Description = "Create Types",
                            Name = "CreateTypes"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2093),
                            Description = "Edit Types",
                            Name = "EditTypes"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2095),
                            Description = "Expire Types",
                            Name = "ExpireTypes"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2096),
                            Description = "View their own shifts",
                            Name = "ViewMyShifts"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2097),
                            Description = "View Shifts at their location",
                            Name = "ViewAllShiftsAtMyLocation"
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2099),
                            Description = "View all Shifts",
                            Name = "ViewAllShifts"
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2100),
                            Description = "Create and Assign Shifts",
                            Name = "CreateAndAssignShifts"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2101),
                            Description = "Expire Shifts",
                            Name = "ExpireShifts"
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2102),
                            Description = "Edit Shifts",
                            Name = "EditShifts"
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2104),
                            Description = "View Distribute Schedule",
                            Name = "ViewDistributeSchedule"
                        },
                        new
                        {
                            Id = 23,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2105),
                            Description = "View Home Location and Assigned Location",
                            Name = "ViewHomeLocationAndAssignedLocation"
                        },
                        new
                        {
                            Id = 24,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2106),
                            Description = "View Region (all locations within region)",
                            Name = "ViewRegion"
                        },
                        new
                        {
                            Id = 25,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2108),
                            Description = "View Province (all regions, all locations)",
                            Name = "ViewProvince"
                        },
                        new
                        {
                            Id = 26,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 655, DateTimeKind.Utc).AddTicks(2109),
                            Description = "Expire Location",
                            Name = "ExpireLocation"
                        });
                });

            modelBuilder.Entity("CAS.DB.models.auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'50', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 657, DateTimeKind.Utc).AddTicks(2903),
                            Description = "Administrator",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 657, DateTimeKind.Utc).AddTicks(3798),
                            Description = "Manager",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 657, DateTimeKind.Utc).AddTicks(3830),
                            Description = "CourtAdmin",
                            Name = "CourtAdmin"
                        });
                });

            modelBuilder.Entity("CAS.DB.models.auth.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'100', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("CAS.DB.models.auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'200', '1', '', '', 'False', '1'");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("HomeLocationId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("IdirId")
                        .HasColumnType("uuid");

                    b.Property<string>("IdirName")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("KeyCloakId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HomeLocationId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 12, 51, 54, 665, DateTimeKind.Local).AddTicks(1557),
                            FirstName = "SYSTEM",
                            IsEnabled = false,
                            LastName = "SYSTEM"
                        });
                });

            modelBuilder.Entity("CAS.DB.models.auth.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'100', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTimeOffset>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.HasIndex("RoleId", "UserId")
                        .IsUnique();

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("CAS.DB.models.lookupcodes.LookupSortOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("LookupCodeId")
                        .HasColumnType("integer");

                    b.Property<int>("LookupType")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationId");

                    b.HasIndex("LookupCodeId");

                    b.HasIndex("LookupType");

                    b.HasIndex("UpdatedById");

                    b.ToTable("LookupSortOrder");
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdminAwayLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsFullDay")
                        .HasColumnType("boolean");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CourtAdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationId");

                    b.HasIndex("CourtAdminId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CourtAdminAwayLocation");
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdminLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsFullDay")
                        .HasColumnType("boolean");

                    b.Property<int?>("LeaveTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CourtAdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("CourtAdminId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CourtAdminLeave");
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdminTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsFullDay")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CourtAdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TrainingTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CourtAdminId");

                    b.HasIndex("TrainingTypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CourtAdminTraining");
                });

            modelBuilder.Entity("db.models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("JustinId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JustinId")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("CAS.DB.models.LookupCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'200', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SubCode")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Type", "Code", "LocationId")
                        .IsUnique();

                    b.ToTable("LookupCode");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 651, DateTimeKind.Utc).AddTicks(8836),
                            Description = "Chief CourtAdmin",
                            Type = 7
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 652, DateTimeKind.Utc).AddTicks(72),
                            Description = "Superintendent",
                            Type = 7
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 652, DateTimeKind.Utc).AddTicks(106),
                            Description = "Staff Inspector",
                            Type = 7
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 652, DateTimeKind.Utc).AddTicks(108),
                            Description = "Inspector",
                            Type = 7
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 652, DateTimeKind.Utc).AddTicks(109),
                            Description = "Staff Sergeant",
                            Type = 7
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 652, DateTimeKind.Utc).AddTicks(110),
                            Description = "Sergeant",
                            Type = 7
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTime(2020, 10, 9, 19, 51, 54, 652, DateTimeKind.Utc).AddTicks(112),
                            Description = "Deputy CourtAdmin",
                            Type = 7
                        });
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdmin", b =>
                {
                    b.HasBaseType("CAS.DB.models.auth.User");

                    b.Property<string>("BadgeNumber")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea");

                    b.Property<string>("Rank")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("CourtAdmin");
                });

            modelBuilder.Entity("CAS.API.Models.DB.Location", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("db.models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CAS.DB.models.auth.Permission", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CAS.DB.models.auth.Role", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CAS.DB.models.auth.RolePermission", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.auth.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CAS.DB.models.auth.User", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.API.Models.DB.Location", "HomeLocation")
                        .WithMany()
                        .HasForeignKey("HomeLocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CAS.DB.models.auth.UserRole", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CAS.DB.models.lookupcodes.LookupSortOrder", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.API.Models.DB.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CAS.DB.models.LookupCode", "LookupCode")
                        .WithMany()
                        .HasForeignKey("LookupCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdminAwayLocation", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.API.Models.DB.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CAS.DB.models.courtAdmin.CourtAdmin", "CourtAdmin")
                        .WithMany("AwayLocation")
                        .HasForeignKey("CourtAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdminLeave", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("CAS.DB.models.LookupCode", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId");

                    b.HasOne("CAS.DB.models.courtAdmin.CourtAdmin", "CourtAdmin")
                        .WithMany("Leave")
                        .HasForeignKey("CourtAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdminTraining", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("CAS.DB.models.courtAdmin.CourtAdmin", "CourtAdmin")
                        .WithMany("Training")
                        .HasForeignKey("CourtAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.LookupCode", "TrainingType")
                        .WithMany()
                        .HasForeignKey("TrainingTypeId");

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("db.models.Region", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CAS.DB.models.LookupCode", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.API.Models.DB.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
