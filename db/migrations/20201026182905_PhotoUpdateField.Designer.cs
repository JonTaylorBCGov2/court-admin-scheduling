// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using CAS.DB.models;

namespace CAS.DB.Migrations
{
    [DbContext(typeof(CourtAdminDbContext))]
    [Migration("20201026182905_PhotoUpdateField")]
    partial class PhotoUpdateField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0-rc.2.20475.6");

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("CAS.API.Models.DB.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(200L, null, null, null, null, null);

                    b.Property<string>("AgencyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JustinCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ParentLocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<string>("Timezone")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId")
                        .IsUnique();

                    b.HasIndex("CreatedById");

                    b.HasIndex("RegionId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("CAS.DB.models.auth.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(200L, null, null, null, null, null);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 490, DateTimeKind.Unspecified).AddTicks(9990), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Allows the user to login.",
                            Name = "Login"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(885), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "View their own profile",
                            Name = "ViewOwnProfile"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(923), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "View profiles in their own location",
                            Name = "ViewProfilesInOwnLocation"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(925), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "View profiles in all locations",
                            Name = "ViewProfilesInAllLocation"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(926), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create Profile (User)",
                            Name = "CreateUsers"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(928), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Expire Profile (User)",
                            Name = "ExpireUsers"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(929), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Edit Profile (User)",
                            Name = "EditUsers"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(931), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "View all Roles",
                            Name = "ViewRoles"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(932), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create and Assign Roles",
                            Name = "CreateAndAssignRoles"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(934), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Expire Roles",
                            Name = "ExpireRoles"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(935), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Edit Roles",
                            Name = "EditRoles"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(937), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "View Manage Types",
                            Name = "ViewManageTypes"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(938), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create Types",
                            Name = "CreateTypes"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(940), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Edit Types",
                            Name = "EditTypes"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(941), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Expire Types",
                            Name = "ExpireTypes"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(943), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "View their own shifts",
                            Name = "ViewMyShifts"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(944), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "View Shifts at their location",
                            Name = "ViewAllShiftsAtMyLocation"
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(946), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "View all Shifts",
                            Name = "ViewAllShifts"
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(947), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Create and Assign Shifts",
                            Name = "CreateAndAssignShifts"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(949), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Expire Shifts",
                            Name = "ExpireShifts"
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(950), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Edit Shifts",
                            Name = "EditShifts"
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(952), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "View Distribute Schedule",
                            Name = "ViewDistributeSchedule"
                        },
                        new
                        {
                            Id = 23,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(953), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "View Assigned Location",
                            Name = "ViewAssignedLocation"
                        },
                        new
                        {
                            Id = 24,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(955), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "View Region (all locations within region)",
                            Name = "ViewRegion"
                        },
                        new
                        {
                            Id = 25,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(956), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "View Province (all regions, all locations)",
                            Name = "ViewProvince"
                        },
                        new
                        {
                            Id = 26,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(957), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Expire Location",
                            Name = "ExpireLocation"
                        },
                        new
                        {
                            Id = 27,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(959), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "View Home Location",
                            Name = "ViewHomeLocation"
                        },
                        new
                        {
                            Id = 28,
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 491, DateTimeKind.Unspecified).AddTicks(960), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Import Shifts",
                            Name = "ImportShifts"
                        });
                });

            modelBuilder.Entity("CAS.DB.models.auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(50L, null, null, null, null, null);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 493, DateTimeKind.Unspecified).AddTicks(5168), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Administrator",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 493, DateTimeKind.Unspecified).AddTicks(6091), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Manager",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 493, DateTimeKind.Unspecified).AddTicks(6119), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "CourtAdmin",
                            Name = "CourtAdmin"
                        });
                });

            modelBuilder.Entity("CAS.DB.models.auth.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(100L, null, null, null, null, null);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("CAS.DB.models.auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasIdentityOptions(200L, null, null, null, null, null);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("HomeLocationId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("IdirId")
                        .HasColumnType("uuid");

                    b.Property<string>("IdirName")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("KeyCloakId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HomeLocationId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ConcurrencyToken = 0u,
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 506, DateTimeKind.Unspecified).AddTicks(5322), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "SYSTEM",
                            IsEnabled = false,
                            LastName = "SYSTEM"
                        });
                });

            modelBuilder.Entity("CAS.DB.models.auth.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(100L, null, null, null, null, null);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExpiryReason")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.HasIndex("RoleId", "UserId")
                        .IsUnique();

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("CAS.DB.models.lookupcodes.LookupSortOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("LookupCodeId")
                        .HasColumnType("integer");

                    b.Property<int>("LookupType")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationId");

                    b.HasIndex("LookupCodeId");

                    b.HasIndex("LookupType");

                    b.HasIndex("UpdatedById");

                    b.ToTable("LookupSortOrder");
                });

            modelBuilder.Entity("CAS.DB.models.scheduling.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(200L, null, null, null, null, null);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("Slots")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Shift");
                });

            modelBuilder.Entity("CAS.DB.models.scheduling.ShiftCourtAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(200L, null, null, null, null, null);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CourtAdminId")
                        .HasColumnType("uuid");

                    b.Property<int>("ShiftId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CourtAdminId")
                        .IsUnique();

                    b.HasIndex("ShiftId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ShiftCourtAdmin");
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdminAwayLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExpiryReason")
                        .HasColumnType("text");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CourtAdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationId");

                    b.HasIndex("CourtAdminId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CourtAdminAwayLocation");
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdminLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExpiryReason")
                        .HasColumnType("text");

                    b.Property<int?>("LeaveTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CourtAdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("CourtAdminId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CourtAdminLeave");
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdminTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExpiryReason")
                        .HasColumnType("text");

                    b.Property<Guid>("CourtAdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("TrainingCertificationExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TrainingTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CourtAdminId");

                    b.HasIndex("TrainingTypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CourtAdminTraining");
                });

            modelBuilder.Entity("db.models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("JustinId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JustinId")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("CAS.DB.models.LookupCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn()
                        .HasIdentityOptions(1000L, null, null, null, null, null);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SubCode")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Type", "Code", "LocationId")
                        .IsUnique();

                    b.ToTable("LookupCode");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Chief CourtAdmin",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(2736), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Chief CourtAdmin",
                            Type = 7
                        },
                        new
                        {
                            Id = 2,
                            Code = "Superintendent",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5426), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Superintendent",
                            Type = 7
                        },
                        new
                        {
                            Id = 3,
                            Code = "Staff Inspector",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5478), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Staff Inspector",
                            Type = 7
                        },
                        new
                        {
                            Id = 4,
                            Code = "Inspector",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5481), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Inspector",
                            Type = 7
                        },
                        new
                        {
                            Id = 5,
                            Code = "Staff Sergeant",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5482), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Staff Sergeant",
                            Type = 7
                        },
                        new
                        {
                            Id = 6,
                            Code = "Sergeant",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5484), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Sergeant",
                            Type = 7
                        },
                        new
                        {
                            Id = 7,
                            Code = "Deputy CourtAdmin",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5486), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Deputy CourtAdmin",
                            Type = 7
                        },
                        new
                        {
                            Id = 8,
                            Code = "CEW (Taser)",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5488), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "CEW (Taser)",
                            Type = 6
                        },
                        new
                        {
                            Id = 9,
                            Code = "DNA",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5526), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "DNA",
                            Type = 6
                        },
                        new
                        {
                            Id = 10,
                            Code = "FRO",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5528), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "FRO",
                            Type = 6
                        },
                        new
                        {
                            Id = 11,
                            Code = "Fire Arm",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5530), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Fire Arm",
                            Type = 6
                        },
                        new
                        {
                            Id = 12,
                            Code = "First Aid",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5532), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "First Aid",
                            Type = 6
                        },
                        new
                        {
                            Id = 13,
                            Code = "Advanced Escort SPC (AESOC)",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5534), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Advanced Escort SPC (AESOC)",
                            Type = 6
                        },
                        new
                        {
                            Id = 14,
                            Code = "Extenuating Circumstances SPC (EXSPC)",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5535), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Extenuating Circumstances SPC (EXSPC)",
                            Type = 6
                        },
                        new
                        {
                            Id = 15,
                            Code = "Search Gate",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5537), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Search Gate",
                            Type = 6
                        },
                        new
                        {
                            Id = 16,
                            Code = "Other",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5539), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Other",
                            Type = 6
                        },
                        new
                        {
                            Id = 17,
                            Code = "STIP",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5541), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "STIP",
                            Type = 5
                        },
                        new
                        {
                            Id = 18,
                            Code = "Annual",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5543), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Annual",
                            Type = 5
                        },
                        new
                        {
                            Id = 19,
                            Code = "Illness",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5545), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Illness",
                            Type = 5
                        },
                        new
                        {
                            Id = 20,
                            Code = "Special",
                            ConcurrencyToken = 0u,
                            CreatedById = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 10, 26, 18, 29, 4, 487, DateTimeKind.Unspecified).AddTicks(5546), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Special",
                            Type = 5
                        });
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdmin", b =>
                {
                    b.HasBaseType("CAS.DB.models.auth.User");

                    b.Property<string>("BadgeNumber")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastPhotoUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea");

                    b.Property<string>("Rank")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("CourtAdmin");
                });

            modelBuilder.Entity("CAS.API.Models.DB.Location", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("db.models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("Region");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CAS.DB.models.auth.Permission", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CAS.DB.models.auth.Role", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CAS.DB.models.auth.RolePermission", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.auth.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CAS.DB.models.auth.User", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.API.Models.DB.Location", "HomeLocation")
                        .WithMany()
                        .HasForeignKey("HomeLocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("HomeLocation");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CAS.DB.models.auth.UserRole", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Role");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CAS.DB.models.lookupcodes.LookupSortOrder", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.API.Models.DB.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CAS.DB.models.LookupCode", "LookupCode")
                        .WithMany()
                        .HasForeignKey("LookupCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("Location");

                    b.Navigation("LookupCode");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CAS.DB.models.scheduling.Shift", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.API.Models.DB.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("Location");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CAS.DB.models.scheduling.ShiftCourtAdmin", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.courtAdmin.CourtAdmin", "CourtAdmin")
                        .WithOne()
                        .HasForeignKey("CAS.DB.models.scheduling.ShiftCourtAdmin", "CourtAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.scheduling.Shift", "Shift")
                        .WithMany("AssignedCourtAdmins")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("CourtAdmin");

                    b.Navigation("Shift");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdminAwayLocation", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.API.Models.DB.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CAS.DB.models.courtAdmin.CourtAdmin", "CourtAdmin")
                        .WithMany("AwayLocation")
                        .HasForeignKey("CourtAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("Location");

                    b.Navigation("CourtAdmin");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdminLeave", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("CAS.DB.models.LookupCode", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId");

                    b.HasOne("CAS.DB.models.courtAdmin.CourtAdmin", "CourtAdmin")
                        .WithMany("Leave")
                        .HasForeignKey("CourtAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("LeaveType");

                    b.Navigation("CourtAdmin");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdminTraining", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("CAS.DB.models.courtAdmin.CourtAdmin", "CourtAdmin")
                        .WithMany("Training")
                        .HasForeignKey("CourtAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAS.DB.models.LookupCode", "TrainingType")
                        .WithMany()
                        .HasForeignKey("TrainingTypeId");

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("CourtAdmin");

                    b.Navigation("TrainingType");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("db.models.Region", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CAS.DB.models.LookupCode", b =>
                {
                    b.HasOne("CAS.DB.models.auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.API.Models.DB.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CAS.DB.models.auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("Location");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CAS.DB.models.auth.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CAS.DB.models.auth.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CAS.DB.models.scheduling.Shift", b =>
                {
                    b.Navigation("AssignedCourtAdmins");
                });

            modelBuilder.Entity("CAS.DB.models.courtAdmin.CourtAdmin", b =>
                {
                    b.Navigation("AwayLocation");

                    b.Navigation("Leave");

                    b.Navigation("Training");
                });
#pragma warning restore 612, 618
        }
    }
}
